name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main
      - develop


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Étape 1.1: Vérifier le code
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 1.2 pour installer JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

#      - name: Install Vault CLI
#        run: |
#          curl -fsSL https://releases.hashicorp.com/vault/1.18.3/vault_1.18.3_linux_386.zip -o vault.zip
#          unzip vault.zip
#          sudo mv vault /usr/local/bin/
#          vault --version
#
#      # Étape 2: Authentification avec Vault pour récupérer les settings Maven
#      - name: Authenticate with Vault
#        uses: hashicorp/vault-action@v2
#        with:
#          url: ${{ vars.VAULT_URL }}
#          method: token
#          #roleId: 9edc0919-8b46-fe55-f8c2-ca53e0615231
#          #secretId: b9fa217d-77a8-2b75-2a51-34ca7a827b85
#          #token: hvs.iWhhGOOpWooVDiq25qXXfVnv
#          token: ${{ secrets.VAULT_GITHUB_TOKEN }}
#
#      # Étape 3: Récupérer les settings Maven depuis Vault
#      - name: Retrieve Maven Settings
#        env:
#          VAULT_ADDR: ${{ vars.VAULT_URL }}
#          VAULT_TOKEN: ${{ secrets.VAULT_GITHUB_TOKEN }}
#        run: |
#          echo "Fetching Maven settings from Vault..."
#          vault kv get -field=settings secrets/maven | base64 --decode > ~/.m2/settings.xml
#          echo "Decoded Maven settings:"
#          cat ~/.m2/settings.xml

      #Etape 3.b recuperer les settings maven via github
      - name: "Decode MAVEN_SETTINGS and save to settings.xml"
        env:
          MAVEN_SETTINGS: ${{ vars.MAVEN_SETTINGS }}
        run: |
          echo "$MAVEN_SETTINGS" | base64 --decode > ~/.m2/settings.xml
          

      # 3.c Valider settings.xml
      - name: Validate settings.xml
        run: cat ~/.m2/settings.xml

      # Étape 4: Mettre en cache les dépendances Maven pour accélérer les builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven
            

      # Étape 5: Construire l'artefact Maven
      - name: Build with Maven
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_URL: ${{ vars.NEXUS_URL }}
        run: mvn clean install -Denv.NEXUS_USERNAME=$NEXUS_USERNAME -Denv.NEXUS_PASSWORD=$NEXUS_PASSWORD -Denv.NEXUS_URL=$NEXUS_URL


      # Étape 6: Extraire la version du projet Maven
      - name: Extract Maven Project Version
        id: extract_version
        run: |
          PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          PROJECT_NAME=$(mvn help:evaluate -Dexpression=project.name -q -DforceStdout)
          echo "PROJECT_VERSION=${PROJECT_VERSION}" >> $GITHUB_ENV
          echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_ENV

      # Étape 7: Construire l'image Docker
      - name: Build Docker Image
        run: |
          IMAGE_NAME="99.79.110.210:8081//repository/docker-releases/${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }}"
          docker build -t $IMAGE_NAME .

      # Étape 8: Se connecter au registre Docker Nexus
      - name: Login to Nexus Docker Registry
        run: echo "${{ secrets.NEXUS_PASSWORD }}" | docker login ${{ vars.NEXUS_URL }} -u "${{ secrets.NEXUS_USERNAME }}" --password-stdin

      # Étape 9: Pousser l'image Docker vers Nexus
      - name: Push Docker Image to Nexus
        run: |
          IMAGE_NAME="${{ vars.NEXUS_URL }}/repository/docker-releases/${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }}"
          docker push $IMAGE_NAME

      # Étape 10: Pousser l'artefact Maven vers Nexus
      - name: Deploy Artifact to Nexus
        run: mvn deploy
